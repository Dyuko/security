##
#Este es un archivo de ejemplo de configuracion que se podria utilizar en un proyecto que utilice joko-security.
# 
##


##
# Database configuration
##
#Base de datos de joko_security
#Debe poseer la estructura esperada por joko.
#Para generar una estructura como la que necesita joko, referirse al archivo readme

#Ejemplo de configuracion en postgres
spring.datasource.url=jdbc\:postgresql\://localhost\:5432/db_joko_security
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

#requisitos para Java 11 y Spring Boot 2
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

spring.jackson.serialization.write-dates-as-timestamps:false

##
# CONTEXT PATH
##
# El context path esperado. En este caso el URL de login seria /joko/api/login
server.context-path=/joko

#La seguridad basica queda desactivada porque se usa los filtros de joko-security
#Esto es requerido puesto que joko extiende de spring-security
security.basic.enabled=false

#Prende o apaga joko-security
#ATENCION: EN PRODUCCION SIEMPRE TIENE QUE IR EN TRUE
joko.authentication.enable=true

##
#Modo para encontrar el secreto
##
#El secret es un string que se utiliza para firmar los tokens. Debe ser guardado con mucho cuidado, puesto que si es comprometido se pueden crear tokens con el mismo.
#En caso haya sido comprometido, debe ser cambiado de manera inmediata. Todos los tokens emitidos anteriormente quedaran inv√°lidos
#
#Existen dos lugares para guardar el token
# * BD: Se guarda dentro de la Base de Datos
# ** Dentro de la tabla keychain
# ** Si es modo BD y no existe una clave, crea una de manera random.
# *FILE: Se guarda dentro del file system.
# ** Se debe configurar el joko.secret.file
joko.secret.mode=BD

#Tiene sentido solamente en caso que el joko.secret.mode sea FILE
#Archivo que contiene el secreto para firmar los tokens
joko.secret.file=/opt/SOMEPROJECT/secret.key
